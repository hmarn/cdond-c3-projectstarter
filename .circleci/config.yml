version: 2.1

orbs: 
  aws-cli: circleci/aws-cli@2.1.0
  slack: circleci/slack@4.1

commands:
  destroy-environment:
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws s3 rm s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --recursive
              aws cloudformation delete-stack --stack-name stack-create-backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name stack-create-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
      description: Revert the last migration
      parameters:
          workflow_id:
              type: string
      steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              # Your Memstash or kvdb.io GET URL code goes here
              # Example: kvdb.io
              STATUS=$(curl --insecure  https://kvdb.io/YBMGekKxb6oqKJi39EV2vR/migration-<<parameters.workflow_id>>)
              # Logic for reverting the database state
              echo $STATUS
              if (( $STATUS == 1 ));
              then
                  cd ~/project/backend
                  npm install
                  npm run migrations:revert
              fi  


  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

jobs:
  build-frontend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./frontend/package-lock.json" }}
      - run:
          name: Build front-end
          command: |
            cd ./frontend
            sudo npm install
            npm run build
      - save_cache:
          paths: [./frontend/node_modules]
          key: frontend-build-{{ checksum "./frontend/package-lock.json" }}
      - notify_slack_error
      - notify_slack_pass

  build-backend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: backend-build-{{ checksum "./backend/package-lock.json" }}
      - run:
          name: Build back-end
          command: |
            cd ./backend
            sudo npm install
            npm run build
      - save_cache:
          paths: [./backend/node_modules]
          key: backend-build-{{ checksum "./backend/package-lock.json" }}
      - notify_slack_error
      - notify_slack_pass

  test-frontend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./frontend/package-lock.json" }}
      - run:
          name: Test front-end
          command: |
            cd ./frontend
            sudo npm install
            npm run test
      - notify_slack_error
      - notify_slack_pass
         
  test-backend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: backend-build-{{ checksum "./backend/package-lock.json" }}
      - run:
          name: Test back-end
          command: |
            cd ./backend
            sudo npm install
            npm run test
      - notify_slack_error
      - notify_slack_pass

  analyze-frontend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./frontend/package-lock.json" }}
      - run:
          name: Analyze front-end
          command: |
            cd ./frontend
            sudo npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_slack_error
      - notify_slack_pass

  analyze-backend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: backend-build-{{ checksum "./backend/package-lock.json" }}
      - run:
          name: Analyze back-end
          command: |
            cd ./backend
            sudo npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_slack_error
      - notify_slack_pass

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name stack-create-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name stack-create-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation \
            list-exports \
            --query "Exports[?Name==\`udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}\`].Value" \
            --output text >> ~/project/.circleci/ansible/inventory.txt

            echo "List Inventory:"
            cat ~/project/.circleci/ansible/inventory.txt
            echo "End!!!"
      - run:
          name: Installing Tar
          command: yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      # - notify_slack_error
      # - notify_slack_pass

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10.4
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "b6:c0:27:6d:7d:d9:81:53:cf:bc:d3:b7:da:f4:fe:11"
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
              python --version
              sudo add-apt-repository universe
              sudo apt-get update
              sudo apt-get install python3-pip
              pip3 --version
              sudo pip3 install ansible
              ansible --version | grep "python version"
      - run:
          name: Installing AWS CLI
          command: |
            apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
      - run:
          name: Configure server
          command: |
              pwd
              cd ~/project/.circleci/ansible/
              ls
              echo "Inventory:"
              cat inventory.txt
              echo "***** \n"
              
              ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      # - notify_slack_error
      # - notify_slack_pass
      # Here's where you will add some code to rollback on failure  
  
  run-migrations:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: backend-build-{{ checksum "./backend/package-lock.json" }}
      - run:
          name: Run migrations
          command: |
              cd ./backend
              npm i
              npm run migrations > migrations_dump.txt
              cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  curl https://kvdb.io/YBMGekKxb6oqKJi39EV2vR/migration-${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./frontend/package-lock.json" }}    
      - run:
          name: Installing Tar
          command: |
            yum install -y tar gzip
            yum install -y unzip        
      - run:
          name: Installing NodeJS
          command: |
            cd ./frontend
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum -y install nodejs
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          workding_directory: ./frontend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters Name=instance-state-name,Values=running --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd ./frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      - destroy-environment
      # Here's where you will add some code to rollback on failure  
      
  deploy-backend:
    docker:
      - image: cimg/python:3.10.4
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "b6:c0:27:6d:7d:d9:81:53:cf:bc:d3:b7:da:f4:fe:11"
      - attach_workspace:
          at: ~/
      - run:
          name: installing ssh client
          command: |
            sudo apt install openssh-client
      - run:
          name: Install Ansible
          command: |
              python --version
              sudo add-apt-repository universe
              sudo apt-get update
              sudo apt-get install python3-pip
              pip3 --version
              sudo pip3 install ansible
              ansible --version | grep "python version"
      - run:
          name: Installing NodeJS
          command: |
            cd ./backend
            curl -sL https://deb.nodesource.com/setup_12.x -o /tmp/nodesource_setup.sh
            sudo bash /tmp/nodesource_setup.sh
            sudo apt install nodejs
            node -v
      - run:
          name: Installing AWS CLI
          command: |
            apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
      - run:
          name: Deploy backend objects
          no_output_timeout: 60m
          command: |
            cd ./backend
            echo ENVIRONMENT=production >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

            npm i
            npm run build
            cd ..
            tar -C backend -czvf backend.tar.gz .
            
            pwd
            echo "Inventory:"
            cat .circleci/ansible/inventory.txt
            echo "***** \n"

            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment

  smoke-test:
    docker:
      - image: cimg/python:3.10.4
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            python --version
            sudo add-apt-repository universe
            sudo apt-get update
            sudo apt-get install python3-pip
            pip3 --version
            sudo pip3 install ansible
            ansible --version | grep "python version"
      - run:
          name: Installing AWS cli on python-3.10
          command: |
            apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
            # sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
      - run:
          name: Frontend, Installing NodeJS
          command: |
            cd ./frontend
            curl -sL https://deb.nodesource.com/setup_12.x -o /tmp/nodesource_setup.sh
            sudo bash /tmp/nodesource_setup.sh
            sudo apt install nodejs
            node -v
      - run:
          name: Backend, Installing NodeJS
          command: |
            cd ./backend
            curl -sL https://deb.nodesource.com/setup_12.x -o /tmp/nodesource_setup.sh
            sudo bash /tmp/nodesource_setup.sh
            sudo apt install nodejs
            node -v
      - run:
          name: Frontend smoke test
          command: |
            cd ./frontend
            URL="http://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
            echo ${URL} 

            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Backend smoke test
          command: |
            cd ./backend
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export BACKEND_DNS=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "BACKEND_IP: ${BACKEND_IP}"
            echo "BACKEND_DNS: ${BACKEND_DNS}"
            echo "API_URL: ${API_URL}"

            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Promoting - Execute cloudfront.yml
          command: |
            aws cloudformation update-stack \
            --use-previous-template \
            --stack-name cloudfront-stack-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameters ParameterKey=WorkflowID,ParameterValue=$CIRCLE_WORKFLOW_ID,UsePreviousValue=false

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Clean up old S3 bucket
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch all stack names
            export STACKS=($(aws cloudformation list-stacks \
                          --query "StackSummaries[*].StackName" \
                          --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"  
            if [[ ! -z $OldWorkflowID ]]
            then
              echo "Found OldWorkflowID!!"

              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "stack-create-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "stack-create-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "cloudfront-stack-${OldWorkflowID}"
            else
              echo "Not Found OldWorkflowID!!"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - analyze-frontend:
      #     requires: [build-frontend]
      # - analyze-backend:
      #     requires: [build-backend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]