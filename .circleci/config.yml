version: 2.1

orbs: 
  aws-cli: circleci/aws-cli@2.1.0

commands:
  destroy_environment:
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name stack-create-backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name stack-create-frontend-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  build-frontend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./frontend/package-lock.json" }}
      - run:
          name: Build front-end
          command: |
            cd ./frontend
            pwd
            node --version
            npm --version
            sudo npm install
            npm run build
      - save_cache:
          paths: [./frontend/node_modules]
          key: frontend-build-{{ checksum "./frontend/package-lock.json" }}
      

  build-backend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: backend-build-{{ checksum "./backend/package-lock.json" }}
      - run:
          name: Build back-end
          command: |
            cd ./backend
            pwd
            node --version
            npm --version
            sudo npm install
            npm run build
      - save_cache:
          paths: [./backend/node_modules]
          key: backend-build-{{ checksum "./backend/package-lock.json" }}

  test-frontend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./frontend/package-lock.json" }}
      - run:
          name: Test front-end
          command: |
            cd ./frontend
            pwd
            node --version
            npm --version
            sudo npm install
            npm run test
                
  test-backend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: backend-build-{{ checksum "./backend/package-lock.json" }}
      - run:
          name: Test back-end
          command: |
            cd ./backend
            pwd
            node --version
            npm --version
            sudo npm install
            npm run test

  analyze-frontend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./frontend/package-lock.json" }}
      - run:
          name: Analyze front-end
          command: |
            cd ./frontend
            pwd
            node --version
            npm --version
            sudo npm install
            sudo npm audit fix --audit-level=critical

  analyze-backend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: backend-build-{{ checksum "./backend/package-lock.json" }}
      - run:
          name: Analyze back-end
          command: |
            cd ./backend
            pwd
            node --version
            npm --version
            sudo npm install
            sudo npm audit fix --audit-level=critical  

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name stack-create-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="backend-${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name stack-create-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="frontend-${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - run:
          name: Test failure
          command: return 1
      - destroy_environment

  # configure-infrastructure:
  #   docker:
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # Your code here
  #           exit 1
  #     - run:
  #         name: Configure server
  #         command: |
  #           # Your code here
  #           exit 1
  #     # Here's where you will add some code to rollback on failure  

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - analyze-frontend:
          requires: [build-frontend]
      - analyze-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, analyze-frontend, analyze-backend]
          filters:
            branches:
              only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]

