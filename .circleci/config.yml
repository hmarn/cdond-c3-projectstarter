version: 2.1

orbs: 
  aws-cli: circleci/aws-cli@2.1.0
  slack: circleci/slack@4.1

commands:
  destroy-environment:
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name stack-create-backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name stack-create-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

jobs:
  build-frontend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./frontend/package-lock.json" }}
      - run:
          name: Build front-end
          command: |
            cd ./frontend
            sudo npm install
            npm run build
      - save_cache:
          paths: [./frontend/node_modules]
          key: frontend-build-{{ checksum "./frontend/package-lock.json" }}
      - notify_slack_error
      - notify_slack_pass

  build-backend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: backend-build-{{ checksum "./backend/package-lock.json" }}
      - run:
          name: Build back-end
          command: |
            cd ./backend
            sudo npm install
            npm run build
      - save_cache:
          paths: [./backend/node_modules]
          key: backend-build-{{ checksum "./backend/package-lock.json" }}
      - notify_slack_error
      - notify_slack_pass

  test-frontend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./frontend/package-lock.json" }}
      - run:
          name: Test front-end
          command: |
            cd ./frontend
            sudo npm install
            npm run test
      - notify_slack_error
      - notify_slack_pass
         
  test-backend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: backend-build-{{ checksum "./backend/package-lock.json" }}
      - run:
          name: Test back-end
          command: |
            cd ./backend
            sudo npm install
            npm run test
      - notify_slack_error
      - notify_slack_pass

  analyze-frontend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: frontend-build-{{ checksum "./frontend/package-lock.json" }}
      - run:
          name: Analyze front-end
          command: |
            cd ./frontend
            sudo npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_slack_error
      - notify_slack_pass

  analyze-backend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - restore_cache:
          key: backend-build-{{ checksum "./backend/package-lock.json" }}
      - run:
          name: Analyze back-end
          command: |
            cd ./backend
            sudo npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_slack_error
      - notify_slack_pass

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name stack-create-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name stack-create-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Installing Tar
          command: yum install -y tar gzip
      - persist_to_workspace:
          root: ~/project/.circleci/ansible/
          paths:
            - inventory.txt
      - destroy-environment
      # - notify_slack_error
      # - notify_slack_pass

  configure-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "b6:c0:27:6d:7d:d9:81:53:cf:bc:d3:b7:da:f4:fe:11"
      - run:
          name: Installing Tar
          command: |
              yum install -y tar gzip
      - attach_workspace:
          at: ~/project/.circleci/ansible/
      - run:
          name: Install Ansible
          command: |
              yum -y install python3 python3-pip
              pip3 install ansible
              ansible --version | grep "python version"
      - run:
          name: Configure server
          command: |
              cd ~/project/.circleci/ansible/
              ansible-playbook -i inventory.txt configure-server.yml
      # - notify_slack_error
      # - notify_slack_pass
      # Here's where you will add some code to rollback on failure  

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - analyze-frontend:
          requires: [build-frontend]
      - analyze-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, analyze-frontend, analyze-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]

# stopped in last job .. because it requires cloudfrontend and that requires AWS OIA premission